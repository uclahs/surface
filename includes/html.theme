<?php

/**
 * @file
 * HTML-related hook implementations.
 */

use Drupal\views\Views;
use Drupal\node\NodeInterface;
use Drupal\Core\Url;
use Drupal\file\Entity\File;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function surface_preprocess_html(&$variables) {
  // Add meta to Article/Events.
  if (($variables['root_path'] === 'articles') || ($variables['root_path'] === 'events')) {
    $site_name = \Drupal::config('system.site')->get('name');
    $type = $variables["page"]["#type"];
    $title = str_replace(' | Global', '', $variables["head_title"]["title"]);
    $url = \Drupal::request()->getHost() . \Drupal::request()->getRequestUri();
    $description = 'Search ' . $variables['root_path'] . ' on ' . $site_name;
    $meta_description = [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'description',
        'content' => $description,
      ],
    ];

    $og_name = [
      '#tag' => 'meta',
      '#attributes' => [
        'property' => 'og:site_name',
        'content' => $site_name,
      ],
    ];

    $og_type = [
      '#tag' => 'meta',
      '#attributes' => [
        'property' => 'og:type',
        'content' => $type,
      ],
    ];

    $og_url = [
      '#tag' => 'meta',
      '#attributes' => [
        'property' => 'og:url',
        'content' => $url,
      ],
    ];

    $og_title = [
      '#tag' => 'meta',
      '#attributes' => [
        'property' => 'og:title',
        'content' => $title,
      ],
    ];

    $og_description = [
      '#tag' => 'meta',
      '#attributes' => [
        'property' => 'og:description',
        'content' => $description,
      ],
    ];

    $twitter_card = [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'twitter_card',
        'content' => 'summary',
      ],
    ];

    $twitter_description = [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'twitter:description',
        'content' => $description,
      ],
    ];

    $twitter_title = [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'twitter:title',
        'content' => $title,
      ],
    ];

    $twitter_url = [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'twitter:url',
        'content' => $url,
      ],
    ];

    $twitter_dnt = [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'twitter:dnt',
        'content' => 'on',
      ],
    ];

    $variables['page']['#attached']['html_head'][] = [
      $meta_description,
      'meta_description',
    ];

    $variables['page']['#attached']['html_head'][] = [$og_name, 'og_type'];
    $variables['page']['#attached']['html_head'][] = [$og_type, 'og_type'];
    $variables['page']['#attached']['html_head'][] = [$og_url, 'og_url'];
    $variables['page']['#attached']['html_head'][] = [$og_title, 'og_title'];
    $variables['page']['#attached']['html_head'][] = [$og_description, 'og_description'];
    $variables['page']['#attached']['html_head'][] = [$twitter_card, 'twitter_card'];
    $variables['page']['#attached']['html_head'][] = [$twitter_description,'twitter_description'];
    $variables['page']['#attached']['html_head'][] = [$twitter_title,'twitter_title'];
    $variables['page']['#attached']['html_head'][] = [$twitter_url,'twitter_url'];
    $variables['page']['#attached']['html_head'][] = [$twitter_dnt,'twitter_dnt'];
  }

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if ($node->status->value == 0) {
      $variables['attributes']['class'][] = 'node-unpublished';
    }
  }

  // Determine if the site has a site alert.
  if (!empty($variables['page']['header']['surface_site_alert'])) {
    $variables['attributes']['class'][] = 'has-alert';
  }
  else {
    $variables['attributes']['class'][] = 'no-alert';
  }

  // Check if the current page contains a specific view.
  if (\Drupal::routeMatch()->getRouteName() == 'entity.node.canonical') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof NodeInterface && $node->getType() == 'sf_article' || $node->getType() == 'sf_event') {

      // Load correct view based on content type.
      if ($node->getType() == 'sf_article') {
        $view_name = 'articles_related';
      }
      else {
        $view_name = 'events_related';
      }

      $view_exists = \Drupal::entityTypeManager()
        ->getStorage('view')
        ->load($view_name);

      if ($view_exists) {
        // Check if the view has results.
        $view_result = Views::getView($view_name);
        $view_result->setDisplay('default');
        $view_result->preExecute();
        $view_result->execute();

        if ($view_result->result) {
          // Add a class to the body element.
          $variables['attributes']['class'][] = 'has-related';
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function surface_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // Surface has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'surface/maintenance-page';
}

/**
 * Implements theme_preprocess to add variables.
 */
function surface_preprocess(&$variables) {
  // Get default theme.
  $site_theme = theme_get_setting('site_theme');
  if ($site_theme and $site_theme != 'default') {
    $variables['data_theme'] = $site_theme;
  }
  else {
    $variables['data_theme'] = 'surface';
  }

  // Get value of Siteimprove.
  $site_improve = theme_get_setting('site_improve');
  if ($site_improve and $site_improve == 'yes') {
    $variables['site_improve'] = $site_improve;
  }
  else {
    $variables['site_improve'] = 'no';
  }

  // Get site name.
  $site_name = \Drupal::config('system.site')->get('name');
  if ($site_name) {
    $variables['site_name'] = $site_name;
  }

  // Get menu type.
  $site_menu = theme_get_setting('site_menu');
  if ($site_menu) {
    $variables['data_menu'] = $site_menu;
  }

  // Get search type.
  $site_search = theme_get_setting('site_search');
  if ($site_search) {
    $variables['data_search'] = $site_search;
  }

  // Get alert.
  $site_alert = theme_get_setting('site_alert');
  if (empty($site_alert['value'])) {
    $variables['data_alert'] = 'false';
  }
  else {
    $variables['data_alert'] = 'true';
    $variables['site_alert'] = $site_alert['value'];
  }

  // Get Give url.
  $site_give = theme_get_setting('site_give');
  if ($site_give) {
    $variables['give_url'] = $site_give;
  }

  // Set header logo.
  $file_id = theme_get_setting('header_logo');

  if ($file_id) {
    $file = $file = File::load($file_id[0]);

    if ($file) {
      $uri = $file->getFileUri();
      $url = Url::fromUri(\Drupal::service('file_url_generator')->generateAbsoluteString($uri))->toString();
      $variables['header_logo'] = $url;
    }
  }

  // Get Header logo style.
  $logo_style = theme_get_setting('logo_style');
  if ($logo_style) {
    $variables['logo_style'] = $logo_style;
  }

  // Set footer logo.
  $file_id = theme_get_setting('footer_logo');

  if ($file_id) {
    $file = $file = File::load($file_id[0]);

    if ($file) {
      $uri = $file->getFileUri();
      $url = Url::fromUri(\Drupal::service('file_url_generator')->generateAbsoluteString($uri))->toString();
      $variables['footer_logo'] = $url;
    }
  }

  // Get Site credit.
  $site_credit = theme_get_setting('site_credit');
  if (!empty($site_credit['value'])) {
    $variables['site_credit'] = $site_credit['value'];
  }

  // Get Facebook url.
  $facebook_url = theme_get_setting('facebook_url');
  if ($facebook_url) {
    $variables['facebook_url'] = $facebook_url;
  }

  // Get Twitter url.
  $twitter_url = theme_get_setting('twitter_url');
  if ($twitter_url) {
    $variables['twitter_url'] = $twitter_url;
  }

  // Get Instagram url.
  $instagram_url = theme_get_setting('instagram_url');
  if ($instagram_url) {
    $variables['instagram_url'] = $instagram_url;
  }

  // Get YouTube url.
  $youtube_url = theme_get_setting('youtube_url');
  if ($youtube_url) {
    $variables['youtube_url'] = $youtube_url;
  }

  // Get Linkedin url.
  $linkedin_url = theme_get_setting('linkedin_url');
  if ($linkedin_url) {
    $variables['linkedin_url'] = $linkedin_url;
  }

  // Get Site extra.
  $site_extra = theme_get_setting('site_extra');
  if (!empty($site_extra['value'])) {
    $variables['site_extra'] = $site_extra['value'];
  }
}
